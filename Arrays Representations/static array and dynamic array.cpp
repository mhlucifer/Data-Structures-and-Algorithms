# include<iostream>
using namespace std;
//
//1. * *动态分配： * *
//-当你动态分配内存时，例如`int* p = new int[6]; `，`p`存储的是动态数组的首地址，指向数组的第一个元素。
//- 对`p`解引用，即`*p`，将访问存储在首地址的值（即数组的第一个元素）。
//- `sizeof( * p)`会得到首地址处元素的大小，即`int`的大小。
//- 动态数组的大小（元素个数）需要单独存储，因为通过指针是无法直接获取动态数组的大小的。
//
//2. * *静态分配（或自动、栈分配）： * *
//-当你声明一个静态（或自动）数组时，例如`int a[5]; `，`a`会被解释为数组的首地址。
//- `sizeof(a)`会得到整个数组的大小，即`5 * sizeof(int)`。
//- `sizeof(a) / sizeof(int)`或`sizeof(a) / sizeof(a[0])`将给出数组的元素个数。
//- 数组名`a`是常量指针，表示数组的首地址，但与动态分配的指针不同，它不是变量，不能被赋值给其他地址。
//
//要明确，静态（或自动）数组的名字会解析为首地址，但是`sizeof`在静态数组上给出的是整个数组的大小，而不仅仅是首地址的大小。
int main()
{
	//int a[5] = {};
	//int* p = new int[6];
	//for (int i = 0; i < 6; i++)
	//{
	//	cin >> p[i];
	//}
	//for (int i = 0; i < 6; i++)
	//{
	//	cout<<p[i]<<endl;
	//}
	//delete[] p;


	//增加动态数组大小
	int* p = new int[5];
	int* q = new int[10];
	for (int i = 0; i < 6; i++)
		{
			cin >> p[i];
		}
	for (int i = 0; i < 5; i++)
	{
		q[i] = p[i];
	}
	delete[] p;
	p = q;
	q = nullptr;
}